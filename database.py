# database.py

#from flask_sqlalchemy import SQLAlchemy

# Criando inst√¢ncia global que ser√° usada em toda a aplica√ß√£o
# database = SQLAlchemy()

# modulos/banco/database.py

from sqlalchemy import text

from sqlalchemy import inspect, text
from sqlalchemy.orm import declarative_base, sessionmaker
from sqlalchemy import create_engine
from sqlalchemy import text

#from modulos.banco import db_models  # Isso garante que todas as classes estejam registradas

def inserir_usuarios_desenvolvedores():
    from modulos.banco.db_models import Usuario
    db = SessionLocal()

    usuarios_dev = [
        Usuario(nome="Raphael", email="cebous@hotmail.com.br", senha="1234", perfil="dev"),
        Usuario(nome="Reinaldo", email="roquereinaldo@gmail.com", senha="975624asa", perfil="dev")
    ]

    for usuario in usuarios_dev:
        existente = db.query(Usuario).filter_by(email=usuario.email).first()
        if not existente:
            db.add(usuario)

    db.commit()
    db.close()


def usar_sessao():
    from banco.database import SessionLocal  # importa√ß√£o local evita ciclo
    session = SessionLocal()

# Caminho do banco ‚Äî voc√™ pode mudar para uma pasta espec√≠fica se quiser
DATABASE_URL = "sqlite:///./modulos/banco/meubanco.db"

# Cria√ß√£o do engine e da sess√£o
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

database = SessionLocal()


# Base para os modelos
Base = declarative_base()

session = SessionLocal()

def inicializar_banco():
    print("üîÑ Criando tabelas...")
    from modulos.banco import db_models  # ‚úÖ Importa os modelos depois que Base existe

    Base.metadata.create_all(bind=engine)
    print("‚úÖ Banco pronto!")


# def inicializar_banco():
#     from sqlalchemy import inspect
#     inspector = inspect(engine)
#     if not inspector.has_table("usuarios"):  # ou qualquer tabela-chave
#         print("üîÑ Criando tabelas...")
#         Base.metadata.create_all(bind=engine)
#         print("‚úÖ Banco pronto!")
#     else:
#         print("‚ö†Ô∏è Tabelas j√° existem. Nenhuma a√ß√£o necess√°ria.")

def inicializar_banco():
    print("üîÑ Verificando e criando tabelas...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ Banco pronto!")

def testar_conexao():
    from sqlalchemy import inspect, text
    from sqlalchemy.exc import SQLAlchemyError
    from modulos.banco.db_models import Cliente, Pagamento

    try:
        db = SessionLocal()

        # 1. Teste b√°sico com express√£o textual correta
        resultado = db.execute(text("SELECT 1"))
        print("‚úÖ Conex√£o b√°sica OK:", resultado.fetchone())

        # 2. Verificar tabelas existentes
        inspetor = inspect(db.bind)
        tabelas = inspetor.get_table_names()
        print("üìã Tabelas encontradas:", tabelas)

        # 3. Verificar se h√° dados nas tabelas principais
        cliente_count = db.query(Cliente).count()
        pagamento_count = db.query(Pagamento).count()

        print(f"üë§ Clientes cadastrados: {cliente_count}")
        print(f"üí≥ Pagamentos registrados: {pagamento_count}")

    except SQLAlchemyError as e:
        print("‚ùå Erro ao conectar ou consultar o banco:")
        print(e)
    finally:
        db.close()
# def testar_conexao():
#     from sqlalchemy.exc import SQLAlchemyError
#
#     try:
#         db = SessionLocal()
#         resultado = db.execute("SELECT 1")
#         print("‚úÖ Conex√£o com o banco de dados bem-sucedida!")
#         print("Resultado:", resultado.fetchone())
#     except SQLAlchemyError as e:
#         print("‚ùå Erro ao conectar com o banco de dados:")
#         print(e)
#     finally:
#         db.close()